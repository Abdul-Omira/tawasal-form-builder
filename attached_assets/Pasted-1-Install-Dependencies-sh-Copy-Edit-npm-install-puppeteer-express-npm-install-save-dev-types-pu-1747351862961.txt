1. Install Dependencies:
sh
Copy
Edit
npm install puppeteer express
npm install --save-dev @types/puppeteer @types/express typescript ts-node
2. Basic HTML Template (Arabic friendly):
Create an HTML template file (template.html) that includes proper RTL handling and UTF-8 encoding:

html
Copy
Edit
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <style>
        body {
            font-family: 'Arial', 'Helvetica', sans-serif;
            direction: rtl;
            text-align: right;
            padding: 30px;
        }
    </style>
</head>
<body>
    <h1>{{title}}</h1>
    <p>{{content}}</p>
</body>
</html>
Replace {{title}} and {{content}} dynamically from your backend.

3. PDF Generation with Puppeteer (Node.js + TypeScript):
src/pdfGenerator.ts

typescript
Copy
Edit
import puppeteer from 'puppeteer';
import fs from 'fs';
import path from 'path';

export async function generateArabicPDF(title: string, content: string, outputPath: string) {
    const templatePath = path.join(__dirname, 'template.html');
    let templateHTML = fs.readFileSync(templatePath, 'utf8');

    templateHTML = templateHTML
        .replace('{{title}}', title)
        .replace('{{content}}', content);

    const browser = await puppeteer.launch({
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    const page = await browser.newPage();

    await page.setContent(templateHTML, { waitUntil: 'networkidle0' });
    await page.pdf({ 
        path: outputPath, 
        format: 'A4',
        printBackground: true 
    });

    await browser.close();
}
4. Using Express Server to Serve PDF:
src/server.ts

typescript
Copy
Edit
import express from 'express';
import { generateArabicPDF } from './pdfGenerator';
import path from 'path';

const app = express();
app.use(express.json());

app.post('/export-pdf', async (req, res) => {
    const { title, content } = req.body;
    
    const outputPath = path.join(__dirname, 'output', `arabic-${Date.now()}.pdf`);

    try {
        await generateArabicPDF(title, content, outputPath);
        res.download(outputPath);
    } catch (error) {
        console.error(error);
        res.status(500).send('Error generating PDF');
    }
});

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
Ensure output directory exists:

sh
Copy
Edit
mkdir -p src/output
5. Example Request to Generate PDF:
Make an API call from your frontend or Postman to test:

http
Copy
Edit
POST http://localhost:3000/export-pdf
Content-Type: application/json

{
    "title": "الجمهورية العربية السورية - وزارة الاتصالات",
    "content": "هذا تقرير خاص صادر عن الوزارة يحتوي على معلومات مهمة عن الخدمات المقدمة للمواطنين."
}